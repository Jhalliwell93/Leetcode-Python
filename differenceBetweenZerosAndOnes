# This code is to provide a solution for the Leetcode Algorithym Challenge "https://leetcode.com/problems/difference-between-ones-and-zeros-in-row-and-column/description/"
# The aim of this code is to take a 3d matrix with ones and zeros, and return a matrix made of the differences between the ones and zeros in the rows and columns. 
# The code achieves this by creating vectors for the rows and colums containing the sum of the 1's minus the 0's.
# Is then uses these vectors to create a 3d matrix containing the sum of the vectors.


class Solution:
    def onesMinusZeros(self, matrix: List[List[int]]) -> List[List[int]]:
        # Create vectors for the differences between the columns and rows
        n, m = len(matrix), len(matrix[0])

        row_diff = [0] * n    # 2d vector for the sum of 1's minus the sum of 0's in each row
        col_diff = [0] * m    # 2d vector for the sum of 1's minus the sum of 0's in each column

        # Calculate values for vectors
        for i in range(n):
            for j in range(m):
                if matrix[i][j] == 1:    
                    row_diff[i] += 1       
                    col_diff[j] += 1
                else:
                    row_diff[i] -= 1
                    col_diff[j] -= 1

        # Calculate the final matrix
        ans = [[row_diff[i] + col_diff[j] for j in range(m)] for i in range(n)]
        return ans
